    <div class="spoiler"><br>
        <input onclick="showSpoiler(this);" value="Show/Hide" type="button">
        <div class="inner" style="display: none;">
            <pre><code class="c++">#include &lt;Wire.h&gt;
#include &lt;VirtualWire.h&gt;
#include &lt;DS3231.h&gt;
#include &lt;LiquidCrystal.h&gt;
#include &lt;avr/wdt.h&gt;

DS3231 clock;
RTCDateTime dt;
int buz = 13;
//int pirPin = 6;
int pirValue;
LiquidCrystal lcd(7, 8, 9, 10, 6, 12);
int x, y, a, b = 1;
int n;
int MENU = 0;
int UP = 5;
int DOWN = 2;
int RED = 3;
char hour;
bool dodate = true;
int alh, alm;
int go = 1;
int retro = 4;
int c = 0;
int mode = 0;
int pressed = 0;
int aa, ba;
boolean alarm = "on";
int detectMode = 0;
int cset;
boolean clockset;
boolean first = true;

int hdecal;
int mdecal;
int sec, secdecal;

float valeur;
int light;
int freq;

byte carrelage[8] = {
    B01010,
    B10101,
    B01010,
    B10101,
    B01010,
    B10101,
    B01010,
    B10101};

byte underline[8] = {
    B00000,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000,
    B11111};

byte topline[8] = {
    B11111,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000,
    B00000};

byte smiley[8] = {
    B00000,
    B10001,
    B00000,
    B00000,
    B10001,
    B01110,
    B00000,
};

byte basgauche[] = {
    B10000,
    B10000,
    B10000,
    B10000,
    B10000,
    B10000,
    B10000,
    B11111};

byte basdroit[] = {
    B00001,
    B00001,
    B00001,
    B00001,
    B00001,
    B00001,
    B00001,
    B11111};

byte hautgauche[] = {
    B11111,
    B10000,
    B10000,
    B10000,
    B10000,
    B10000,
    B10000,
    B10000};

byte hautdroit[] = {
    B11111,
    B00001,
    B00001,
    B00001,
    B00001,
    B00001,
    B00001,
    B00001};

void setup()
{

//clock.setDateTime(__DATE__, __TIME__);
//clock.setHour(1);

lcd.createChar(0, underline);
lcd.createChar(1, carrelage);
lcd.createChar(2, topline);
lcd.createChar(3, basdroit);
lcd.createChar(4, basgauche);
lcd.createChar(5, hautdroit);
lcd.createChar(6, hautgauche);

lcd.begin(16, 2);
Serial.begin(9600);
pinMode(buz, OUTPUT);
pinMode(retro, OUTPUT);
//pinMode(pirPin, INPUT);
pinMode(MENU, INPUT_PULLUP);
pinMode(UP, INPUT_PULLUP);
pinMode(DOWN, INPUT_PULLUP);
pinMode(RED, INPUT_PULLUP);

// Initialize DS3231
Serial.println("Initialize DS3231");
clock.begin();

vw_setup(2000);
vw_rx_start();

// Set sketch compiling time ############################   1st boot set hour put this line
//                           ############################   2nd boot skip this line, no time set anymore
//clock.setDateTime(__DATE__, __TIME__);
alh = 12;
alm = 0;

digitalWrite(retro, HIGH);
hdecal = 0;
mdecal = 0;
sec = 0;

lcd.setCursor(0, 0);
lcd.write(byte(6));
for (int i = 0; i < 14; i++)
{
    lcd.write(byte(2));
}
lcd.write(byte(5));

lcd.setCursor(0, 1);
lcd.write(byte(4));
for (int i = 0; i < 14; i++)
{
    lcd.write(byte(0));
}
lcd.write(byte(3));

delay(2000);
lcd.setCursor(0, 0);
lcd.print("                ");
lcd.setCursor(0, 1);
lcd.print("                ");
delay(500);

lcd.setCursor(13, 0);
lcd.print(" ON");

lcd.setCursor(13, 1);
lcd.print("alm");

//lcd.setCursor(10,0);
//lcd.write(byte(0));
}

void loop()
{
dt = clock.getDateTime();
//pirValue = digitalRead(pirPin);

byte taille_message = sizeof(float);

//////////// GET MESSAGE
/*if (vw_get_message((byte *) &valeur, &taille_message)) {
    // On copie le message, qu'il soit corrompu ou non

    Serial.println(valeur); // Affiche le message
    pirValue = valeur;
}*/

c = 0;

///////////// WRITE HOUR
lcd.setCursor(0, c);
if (dt.hour < 10)
{
    lcd.print("0");
    lcd.setCursor(1, c);
    lcd.print(dt.hour);
}
else
    lcd.print(dt.hour);
lcd.setCursor(2, c);
lcd.print(":");
lcd.setCursor(3, c);
if (dt.minute < 10)
{
    lcd.print("0");
    lcd.setCursor(4, c);
    lcd.print(dt.minute);
}
else
    lcd.print(dt.minute);
lcd.setCursor(5, c);
lcd.print(":");
lcd.setCursor(6, c);
if (dt.second < 10)
{
    lcd.print("0");
    lcd.setCursor(7, c);
    lcd.print(dt.second);
}
else
    lcd.print(dt.second);

c = 1;
///////////// WRITE DATE
if (dodate == true)
{
    lcd.setCursor(0, c);
    if (dt.day < 10)
    {
    lcd.print("0");
    lcd.setCursor(1, c);
    lcd.print(dt.day);
    }
    else
    lcd.print(dt.day);
    lcd.setCursor(2, c);
    lcd.print("/");
    lcd.setCursor(3, c);
    if (dt.month < 10)
    {
    lcd.print("0");
    lcd.setCursor(4, c);
    lcd.print(dt.month);
    }
    else
    lcd.print(dt.month);
    lcd.setCursor(5, c);
    lcd.print("/");
    lcd.setCursor(6, c);
    if (dt.year < 10)
    {
    lcd.print("0");
    lcd.setCursor(7, c);
    lcd.print(dt.year);
    }
    else
    lcd.print(dt.year);
}

///////// CHECK ALARM
if (alh == dt.hour && alm == dt.minute && 0 == dt.second && alarm == true && detectMode == 0)
{
    if (go == 1)
    {
    while (pirValue == 0)
    {
        if (vw_get_message((byte *)&valeur, &taille_message))
        {
        pirValue = valeur;
        }
        digitalWrite(retro, HIGH);
        digitalWrite(buz, HIGH);
        delay(100);
        digitalWrite(buz, LOW);
        delay(100);
    }
    digitalWrite(retro, LOW);
    }
    else
    {
    digitalWrite(retro, HIGH);
    go = 0;
    }
}
if (detectMode == 1)
{
    if (vw_get_message((byte *)&valeur, &taille_message))
    {
    Serial.println(valeur); // Affiche le message
    pirValue = valeur;
    //dot(valeur, 2);
    }
    else
    {
    //dot(3, 2);
    //Serial.println("rien n'est reÃ§u");
    }
    if (pirValue == 1)
    {
    digitalWrite(buz, HIGH);
    delay(100);
    digitalWrite(buz, LOW);
    delay(100);
    }
    /*while (pirValue==1) {
    if (vw_get_message((byte *) &valeur, &taille_message)) {
    //Serial.println(valeur); // Affiche le message
    pirValue = valeur;
    dot(valeur, 2);}
    
    digitalWrite(buz,HIGH);
    delay(100);
    digitalWrite(buz,LOW);
    delay(100);
    }*/
}

/////////  MENU BUTTON CODE
if (digitalRead(MENU) == LOW)
{
    aa = 1;
    ba = 0;
}
if (digitalRead(MENU) == HIGH)
{
    ba = 1;
}

if (aa == 1 && ba == 1)
{
    dodate = false;
    if (mode == 0)
    {
    lcd.setCursor(0, 1);
    lcd.print("           ");
    delay(300);
    lcd.setCursor(0, 1);
    lcd.print("Al: ");

    lcd.setCursor(7, 1);
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    lcd.print("   ");

    lcd.setCursor(4, 1);
    lcd.write(byte(0));
    lcd.write(byte(0));
    delay(600);

    lcd.setCursor(4, 1);
    if (alh < 10)
        lcd.print("0");
    lcd.print(alh);
    lcd.print(":");
    mode = 1;
    }
    else if (mode == 1)
    {
    mode = 2;

    lcd.setCursor(7, 1);
    lcd.write(byte(0));
    lcd.write(byte(0));
    delay(600);

    lcd.setCursor(7, 1);
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    lcd.print("   ");
    }
    else if (mode == 2)
    {
    lcd.setCursor(0, 1);
    lcd.print("         ");
    mode = 0;
    lcd.setCursor(0, 1);
    lcd.print("           ");
    delay(300);
    dodate = true;
    }
    //Serial.print(mode);
    aa = 0;
    ba = 0;
}

/////////// DOWN BUTTON CODE
if (digitalRead(DOWN) == LOW)
{
    if (mode == 1)
    {
    if (alh > 0)
    {
        alh -= 1;
    }
    else
    {
        alh = 23;
    }
    lcd.setCursor(0, 1);
    lcd.print("         ");
    lcd.setCursor(0, 1);
    lcd.print("Al: ");
    if (alh < 10)
        lcd.print("0");
    lcd.print(alh);
    lcd.print(":");
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    }
    else if (mode == 2)
    {
    if (alm > 0)
    {
        alm -= 1;
    }
    else
    {
        alm = 59;
    }
    lcd.setCursor(0, 1);
    lcd.print("         ");
    lcd.setCursor(0, 1);
    lcd.print("Al: ");
    if (alh < 10)
        lcd.print("0");
    lcd.print(alh);
    lcd.print(":");
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    }
    else
    {
    if (alarm == true)
    {
        lcd.setCursor(0, 1);
        lcd.print("           ");
        delay(300);
        lcd.setCursor(0, 1);
        lcd.print("Alarm OFF ");
        lcd.setCursor(13, 0);
        lcd.print("OFF");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("           ");
        delay(300);
        alarm = false;
    }
    else if (alarm == false)
    {
        lcd.setCursor(0, 1);
        lcd.print("           ");
        delay(300);
        lcd.setCursor(0, 1);
        lcd.print("Alarm ON  ");
        lcd.setCursor(13, 0);
        lcd.print(" ON");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("           ");
        delay(300);
        alarm = true;
    }
    }
}
/////////// UP BUTTON CODE
if (digitalRead(UP) == LOW)
{
    if (mode == 1)
    {
    if (alh < 23)
    {
        alh += 1;
    }
    else
    {
        alh = 0;
    }
    lcd.setCursor(0, 1);
    lcd.print("         ");
    lcd.setCursor(0, 1);
    lcd.print("Al: ");
    if (alh < 10)
        lcd.print("0");
    lcd.print(alh);
    lcd.print(":");
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    }
    else if (mode == 2)
    {
    if (alm < 59)
    {
        alm += 1;
    }
    else
    {
        alm = 0;
    }
    lcd.setCursor(0, 1);
    lcd.print("         ");
    lcd.setCursor(0, 1);
    lcd.print("Al: ");
    if (alh < 10)
        lcd.print("0");
    lcd.print(alh);
    lcd.print(":");
    if (alm < 10)
        lcd.print("0");
    lcd.print(alm);
    }
    else if (mode == 0 && clockset == false && first == false)
    {
    Serial.println("light");
    if (digitalRead(retro) == HIGH)
    {
        digitalWrite(retro, LOW);
        light = 0;
    }
    else
    {
        digitalWrite(retro, HIGH);
        light = 1;
    }
    //delay(300);
    }
    else if (clockset == true)
    {
    dt.hour += 1;
    }
    delay(200);
}

///////// RED BUTTON CODE
red();

delay(80);
first = false;
/*if (dt.second == 0) digitalWrite(buz,HIGH);
else digitalWrite(buz,LOW);*/
}
void wlight()
{
switch (light)
{
case 0:
    digitalWrite(retro, LOW);
case 1:
    digitalWrite(retro, HIGH);
}
}
void dot(int valeur, int mode)
{
switch (mode)
{
case 1:
    lcd.setCursor(15, 0);
    lcd.print(".");
    red();
    delay(500);
    lcd.setCursor(15, 0);
    lcd.print(" ");
case 2:
    lcd.setCursor(15, 0);
    lcd.print(valeur);
    red();
    delay(500);
    lcd.setCursor(15, 0);
    lcd.print(" ");
}
}
void red()
{
if (digitalRead(RED) == LOW && mode == 0)
{
    dodate = false;
    if (cset == 10 && clockset == false)
    {
    clockset = true;
    lcd.setCursor(0, 1);
    lcd.print("           ");
    delay(300);
    lcd.setCursor(0, 1);
    lcd.print("reset");
    //clock.setDateTime(__DATE__, __TIME__);
    delay(1000);
    lcd.print(".");
    delay(1000);
    lcd.print(".");
    delay(1000);
    software_Reboot();
    }
    else if (detectMode == 0 && cset == 0 && clockset == false)
    {
    lcd.setCursor(0, 1);
    lcd.print("           ");
    delay(300);
    lcd.setCursor(0, 1);
    lcd.print("Move detect.");
    lcd.setCursor(13, 1);
    lcd.print("mdt");
    delay(1000);
    lcd.setCursor(0, 1);
    lcd.print("            ");
    detectMode = 1;
    }
    else if (detectMode != 0 && cset == 0 && clockset == false)
    {
    lcd.setCursor(0, 1);
    lcd.print("           ");
    delay(300);
    lcd.setCursor(0, 1);
    lcd.print("Al. mode");
    lcd.setCursor(13, 1);
    lcd.print("alm");
    delay(1000);
    lcd.print("           ");
    delay(300);
    lcd.setCursor(0, 1);
    detectMode = 0;
    }
    else if (clockset == true)
    {
    clockset = false;
    lcd.setCursor(0, 1);
    lcd.print("           ");
    }
    cset += 1;
    delay(300);
    dodate = true;
}
else
{
    cset = 0;
}
}

void software_Reboot()
{
wdt_enable(WDTO_15MS);

while (1)
{
}
}</code></pre>
        </div>
    </div>

    <div class="spoiler"><br>
        <input onclick="showSpoiler(this);" value="Show/Hide" type="button">
        <div class="inner" style="display: none;">
            <pre><code class="c++">#include &lt;VirtualWire.h&gt;

int pirPin = 6;
int pirValue;
float valeur = 0;

void setup() {
    Serial.begin(9600);
    pinMode(pirPin, INPUT);
    //pinMode(12, OUTPUT);

    // Initialisation de la bibliothï¿½que VirtualWire
    // Vous pouvez changez les broches RX/TX/PTT avant vw_setup() si nï¿½cessaire
    vw_setup(2000);
    
    Serial.println("Go !"); 
}
    
void loop() {
    
    // Lit un nombre depuis le port sÃ©rie
    pirValue = digitalRead(pirPin);

    valeur = pirValue;
    Serial.println(pirValue);
    //digitalWrite(12, pirValue);
    
    vw_send((byte *) &valeur, sizeof(valeur)); // On envoie le message
    ///Serial.println("En envoyage...");
    //vw_wait_tx(); // On attend la fin de l'envoi
    
}
            </code></pre>
        </div>
    </div>